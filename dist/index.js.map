{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;;AAAA,sDAA6D;AAC7D,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAChC,MAAM,GAAG,GAAY,IAAA,iBAAO,GAAE,CAAA;AAC9B,4DAAkC;AAElC,yDAA6C;AAE7C,MAAM,CAAC,MAAM,EAAE,CAAA;AACf,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAA;AAErC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAC3C,GAAG,CAAC,IAAI,CAAC,mBAAQ,CAAC,CAAC;AACrB,CAAC,CAAC,CAAA;AAEF,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;KACnB,GAAG,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACzC,IAAG,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;QACpC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAA;QAC9B,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAA;QAC5B,MAAM,UAAU,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAA;QACrC,MAAM,QAAQ,GAAG,IAAI,GAAG,KAAK,CAAA;QAC7B,MAAM,YAAY,GAA0B;YAC1C,MAAM,EAAE,mBAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;SACrD,CAAA;QACD,IAAI,UAAU,GAAG,CAAC,EAAE;YAClB,YAAY,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,CAAA;SACjC;QACD,IAAI,QAAQ,GAAG,mBAAQ,CAAC,OAAO,CAAC,MAAM,EAAE;YACtC,YAAY,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAA;SAC7B;QACD,qBAAE,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,IAAI,EAAE;YACzB,OAAO,CAAC,GAAG,CAAC;gBACV,uBAAI,CAAC,MAAM,CAAC;oBACV,IAAI,EAAE,gCAAgC;oBACtC,IAAI,EAAE,aAAa;oBACnB,OAAO,EAAE,EAAE;oBACX,EAAE,EAAE,sCAAsC;iBAC3C,CAAC;aACH,CAAC;iBACC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;QACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;KAC1C;IACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mBAAQ,CAAC,OAAO,CAAC,CAAA;AAC/C,CAAC,CAAC,CAAA;AAEJ,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAA;AACtD,CAAC,CAAC,CAAA","sourcesContent":["import express, { Express, Request, Response } from 'express'\nconst dotenv = require('dotenv')\nconst app: Express = express()\nimport milkData from './milk.json'\nimport { InterfaceResponseData } from './types';\nimport { db, Milk } from './mongo-connection'\n\ndotenv.config()\nconst port = process.env.PORT || 8080\n\napp.get('/', (req: Request, res: Response) => {\n  res.json(milkData);\n})\n\napp.route('/api/milk')\n  .get(async (req: Request, res: Response) => {\n    if(req.query.limit && req.query.page) {\n      const limit = +req.query.limit\n      const page = +req.query.page\n      const startIndex = (page - 1) * limit\n      const endIndex = page * limit\n      const responseData: InterfaceResponseData = {\n        result: milkData.results.slice(startIndex, endIndex)\n      }\n      if (startIndex > 0) {\n        responseData.previous = page - 1\n      }\n      if (endIndex < milkData.results.length) {\n        responseData.next = page + 1\n      }\n      db.once('open', async () => {\n        Promise.all([\n          Milk.create({\n            name: \"Gaven's numberless walnut milk\",\n            type: \"Walnut milk\",\n            storage: 89,\n            id: \"dd9140c5-af1d-4861-9736-e0b4f4a81bb7\"\n          })\n        ])\n          .then(() => console.log('done'))\n      })\n      return res.status(200).send(responseData)\n    }\n    return res.status(200).send(milkData.results)\n  })\n\napp.listen(port, () => {\n  console.log(`Server up and running on port ${port}`)\n})\n"]}